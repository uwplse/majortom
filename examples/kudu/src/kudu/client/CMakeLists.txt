# Copyright (c) 2013, Cloudera, inc.
# Confidential Cloudera Information: Covered by NDA.

set(CLIENT_SRCS
  batcher.cc
  client.cc
  client_builder-internal.cc
  client-internal.cc
  error_collector.cc
  error-internal.cc
  meta_cache.cc
  row_result.cc
  scan_predicate.cc
  scanner-internal.cc
  session-internal.cc
  schema.cc
  table-internal.cc
  table_alterer-internal.cc
  table_creator-internal.cc
  tablet_server-internal.cc
  value.cc
  write_op.cc
)

set(CLIENT_LIBS
  kudu_common
  master_proto
  master_rpc
  tserver_proto
  tserver_service_proto
  kudu_util
  gutil
  krpc)

# Make sure we exclude tcmalloc from the exported library; we want the library
# code to use the linking application's malloc implementation.
set(EXPORTED_CLIENT_LIBS
  ${CLIENT_LIBS}
  ${KUDU_BASE_LIBS})
list(REMOVE_ITEM EXPORTED_CLIENT_LIBS tcmalloc profiler)

# We customize the output name/directory of the exported library so that we can
# call it "kudu_client" without it colliding with the regular library.
#
# Unfortunately, this doesn't extend to the autogenerated cmake files that ship
# with the exported library; they still hew to the original target name of
# "kudu_client_exported".
ADD_EXPORTABLE_LIBRARY(kudu_client
  SRCS ${CLIENT_SRCS}
  DEPS ${CLIENT_LIBS}
  EXPORTED_SHARED
  EXPORTED_OUTPUT_NAME kudu_client
  EXPORTED_OUTPUT_DIRECTORY "${BUILD_OUTPUT_ROOT_DIRECTORY}/exported"
  EXPORTED_DEPS ${EXPORTED_CLIENT_LIBS})

################################################################################
# LIBRARY VERSIONS
################################################################################
#
# The external version of the exported Kudu client library. It is a separate
# entity from the main Kudu version so that the library and backends can evolve
# independently.
#
# Library versions affect packaging and control how the runtime linker finds the
# actual library file. The library's SOVERSION (i.e. major version) is typically
# appended to its package name and to the library filename, which means:
#
# 1. Multiple packages of the different major versions may be installed.
# 2. An application must link against a specific major version of the library.
#
# The minor and patch versions are purely informational; changes to them have no
# effect on runtime linking or on packages.
#
# The major version should only be incremented when an incompatible change is
# made to the library's ABI (i.e. interface to the application). It is not to be
# taken lightly because it has far reaching effects. Besides forcing an
# application to recompile (or worse, rewrite some code), it also affects
# packages. For example, package names typically change after a major version
# bump (e.g. libkuduclient0 becomes libkuduclient1).
#
# The minor and patch versions can be incremented freely, and should be
# incremented when significant (but not incompatible) or insignificant changes
# are made respectively.
#
# For a detailed explanation of the kinds of C++ changes that would break ABI
# compatibility, see:
#
#   https://techbase.kde.org/Policies/Binary_Compatibility_Issues_With_C++
#
# For more background on library versions, see:
#
#   https://autotools.io/libtool/version.html
set(CLIENT_VERSION_MAJOR 0)
set(CLIENT_VERSION_MINOR 1)
set(CLIENT_VERSION_PATCH 0)

set_target_properties(kudu_client_exported
  PROPERTIES
  # Localize thirdparty symbols using a linker version script. This hides them
  # from the client application.
  LINK_FLAGS "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/symbols.map"
  # This version is appended to the filename.
  #
  # For example: libkudu_client.so.1.2.3
  VERSION "${CLIENT_VERSION_MAJOR}.${CLIENT_VERSION_MINOR}.${CLIENT_VERSION_PATCH}"
  # This version is used to create two library symlinks.
  #
  # For example: libkudu_client.so -> libkudu_client.so.1
  #              libkudu_client.so.1 -> libkudu_client.so.1.2.3
  #
  # The runtime linker is expected to look up a library by name and SOVERSION.
  # In the previous example, that means it'll look up a file with name
  # libkudu_client.so.1. If the library is installed, that file should be a
  # symlink to the actual library file libkudu_client.so.1.2.3.
  SOVERSION "${CLIENT_VERSION_MAJOR}")

# Generate kudu_export.h.
generate_export_header(kudu_client_exported
  BASE_NAME kudu
  EXPORT_FILE_NAME ${CMAKE_SOURCE_DIR}/src/kudu/util/kudu_export.h)

# "make install" invocations to generate a directory tree containing the
# exported client library and all of its headers.

# For CMAKE_INSTALL_<dir> variables.
include(GNUInstallDirs)

# Shared library.
install(TARGETS kudu_client_exported
  EXPORT kudu_client_export_set
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

# Headers: client
install(FILES
  callbacks.h
  client.h
  row_result.h
  scan_predicate.h
  schema.h
  stubs.h
  value.h
  write_op.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/kudu/client)

# Headers: common
install(FILES
  ../common/partial_row.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/kudu/common)

# Headers: util
install(FILES
  ../util/kudu_export.h
  ../util/monotime.h
  ../util/slice.h
  ../util/status.h
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/kudu/util)

# Client sample code.
#
# Can't use CMAKE_INSTALL_DOCDIR because we don't ever call project().
install(FILES
  samples/CMakeLists.txt
  samples/sample.cc
  DESTINATION ${CMAKE_INSTALL_DATADIR}/doc/kuduClient/samples)

# Exported cmake file for just the library's targets.
#
# Should not be included directly by users.
install(EXPORT kudu_client_export_set
  FILE kuduClientTargets.cmake
  DESTINATION ${CMAKE_INSTALL_DATADIR}/kuduClient/cmake)

# Exported cmake file for the library.
#
# This is the main cmake entry point and should be included directly.
include(CMakePackageConfigHelpers)
configure_package_config_file(clientConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/clientConfig.cmake
  INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/kuduClient/cmake
  PATH_VARS CMAKE_INSTALL_INCLUDEDIR)
install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/clientConfig.cmake
  DESTINATION ${CMAKE_INSTALL_DATADIR}/kuduClient/cmake
  RENAME kuduClientConfig.cmake)

# There's no way to rename a logical cmake exported target, so we use this
# script to forcefully change the kudu_client_exported target to kudu_client.
install(SCRIPT MungeExportedInstallTargets.cmake)

# Test utility library

# This code is useful for other tests which use the client, but isn't
# part of the client itself (ie we don't want to ship it to customers,
# and therefore don't need to worry about export strictness)
add_library(kudu_client_test_util
  client-test-util.cc)
target_link_libraries(kudu_client_test_util kudu_client)

# Tests

ADD_KUDU_TEST(client_symbol-test.sh)

# The samples are never built with ASAN/TSAN.
if(NOT "${KUDU_USE_ASAN}" AND NOT "${KUDU_USE_TSAN}")
  ADD_KUDU_TEST(client_samples-test.sh RUN_SERIAL true)
endif()
set(KUDU_TEST_LINK_LIBS kudu_client integration-tests ${KUDU_MIN_TEST_LIBS})
ADD_KUDU_TEST(client-test)
ADD_KUDU_TEST(client-unittest)
